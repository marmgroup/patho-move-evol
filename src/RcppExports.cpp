// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// do_eco_sim
Rcpp::List do_eco_sim(const int popsize, const double landsize, const int nFood, const int nClusters, const double clusterDispersal, const double maxAct, const double activityRatio, const double pInactive, const bool collective, const double sensoryRange, const double tmax, const int scenes);
RcppExport SEXP _snevo_do_eco_sim(SEXP popsizeSEXP, SEXP landsizeSEXP, SEXP nFoodSEXP, SEXP nClustersSEXP, SEXP clusterDispersalSEXP, SEXP maxActSEXP, SEXP activityRatioSEXP, SEXP pInactiveSEXP, SEXP collectiveSEXP, SEXP sensoryRangeSEXP, SEXP tmaxSEXP, SEXP scenesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type popsize(popsizeSEXP);
    Rcpp::traits::input_parameter< const double >::type landsize(landsizeSEXP);
    Rcpp::traits::input_parameter< const int >::type nFood(nFoodSEXP);
    Rcpp::traits::input_parameter< const int >::type nClusters(nClustersSEXP);
    Rcpp::traits::input_parameter< const double >::type clusterDispersal(clusterDispersalSEXP);
    Rcpp::traits::input_parameter< const double >::type maxAct(maxActSEXP);
    Rcpp::traits::input_parameter< const double >::type activityRatio(activityRatioSEXP);
    Rcpp::traits::input_parameter< const double >::type pInactive(pInactiveSEXP);
    Rcpp::traits::input_parameter< const bool >::type collective(collectiveSEXP);
    Rcpp::traits::input_parameter< const double >::type sensoryRange(sensoryRangeSEXP);
    Rcpp::traits::input_parameter< const double >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type scenes(scenesSEXP);
    rcpp_result_gen = Rcpp::wrap(do_eco_sim(popsize, landsize, nFood, nClusters, clusterDispersal, maxAct, activityRatio, pInactive, collective, sensoryRange, tmax, scenes));
    return rcpp_result_gen;
END_RCPP
}
// get_test_landscape
Rcpp::DataFrame get_test_landscape(const int nItems, const double landsize, const int nClusters, const double clusterDispersal);
RcppExport SEXP _snevo_get_test_landscape(SEXP nItemsSEXP, SEXP landsizeSEXP, SEXP nClustersSEXP, SEXP clusterDispersalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nItems(nItemsSEXP);
    Rcpp::traits::input_parameter< const double >::type landsize(landsizeSEXP);
    Rcpp::traits::input_parameter< const int >::type nClusters(nClustersSEXP);
    Rcpp::traits::input_parameter< const double >::type clusterDispersal(clusterDispersalSEXP);
    rcpp_result_gen = Rcpp::wrap(get_test_landscape(nItems, landsize, nClusters, clusterDispersal));
    return rcpp_result_gen;
END_RCPP
}
// do_simulation
Rcpp::List do_simulation(int popsize, int genmax, int tmax, int nFood, int foodClusters, double clusterDispersal, double landsize, double competitionCost, const bool collective, const int nScenes);
RcppExport SEXP _snevo_do_simulation(SEXP popsizeSEXP, SEXP genmaxSEXP, SEXP tmaxSEXP, SEXP nFoodSEXP, SEXP foodClustersSEXP, SEXP clusterDispersalSEXP, SEXP landsizeSEXP, SEXP competitionCostSEXP, SEXP collectiveSEXP, SEXP nScenesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type popsize(popsizeSEXP);
    Rcpp::traits::input_parameter< int >::type genmax(genmaxSEXP);
    Rcpp::traits::input_parameter< int >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< int >::type nFood(nFoodSEXP);
    Rcpp::traits::input_parameter< int >::type foodClusters(foodClustersSEXP);
    Rcpp::traits::input_parameter< double >::type clusterDispersal(clusterDispersalSEXP);
    Rcpp::traits::input_parameter< double >::type landsize(landsizeSEXP);
    Rcpp::traits::input_parameter< double >::type competitionCost(competitionCostSEXP);
    Rcpp::traits::input_parameter< const bool >::type collective(collectiveSEXP);
    Rcpp::traits::input_parameter< const int >::type nScenes(nScenesSEXP);
    rcpp_result_gen = Rcpp::wrap(do_simulation(popsize, genmax, tmax, nFood, foodClusters, clusterDispersal, landsize, competitionCost, collective, nScenes));
    return rcpp_result_gen;
END_RCPP
}
// export_pop
DataFrame export_pop(int popsize);
RcppExport SEXP _snevo_export_pop(SEXP popsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type popsize(popsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(export_pop(popsize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_snevo_do_eco_sim", (DL_FUNC) &_snevo_do_eco_sim, 12},
    {"_snevo_get_test_landscape", (DL_FUNC) &_snevo_get_test_landscape, 4},
    {"_snevo_do_simulation", (DL_FUNC) &_snevo_do_simulation, 10},
    {"_snevo_export_pop", (DL_FUNC) &_snevo_export_pop, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_snevo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
